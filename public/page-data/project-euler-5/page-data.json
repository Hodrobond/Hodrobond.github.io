{"componentChunkName":"component---src-templates-blog-post-js","path":"/project-euler-5/","result":{"data":{"site":{"siteMetadata":{"title":"Contemplating Imponderables"}},"markdownRemark":{"id":"fb05d778-b2ba-5a3f-b06b-5572b4159a51","excerpt":"Smallest multiple 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.\nWhat is the smallest positiveâ€¦","html":"<h3>Smallest multiple</h3>\n<blockquote>\n<p>2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.\nWhat is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?</p>\n</blockquote>\n<p>Brute Force:<br/>\nIterate i to n until a number is divisible by 1-20! Let's test it with our sample input first, the numbers up to 10.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">getLowest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> limit <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;=</span>limit<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">%</span>j <span class=\"token operator\">!==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">===</span> limit<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Well. It works! Slowly, but surely. If we want to find the numbers divisible by 1-40 we may very well be waiting until the heat death of the universe. There's nothing inherently <em>wrong</em> with this approach per se. If I forgot someone's phone number I <em>could</em> call every phone number until I find them, it'll take a while but it'll work.</p>\n<p>Alright we learned something related to this a long time ago, many moons ago...likely back in grade school.\nWhat were they called...ah yes, <em>Prime Factors</em>.</p>\n<p>Ah forget it, I don't remember why they were important, skipping to the solution is no fun anyhow. Let's try to reason it out, starting with a smaller number!</p>\n<p>So the number <code class=\"language-text\">20</code> has the prime factors <br/><code class=\"language-text\">[ 2, 2, 5 ]</code>.<br/>It has the factors <br/><code class=\"language-text\">[ 2, 4, 5, 10 ]</code>.<br/>\nInteresting. It looks like every <em>Factor</em> can be expressed through products of one or more <em>Prime Factors</em>.<br/>\n<code class=\"language-text\">10 = 2 * 5</code><br/>\n<code class=\"language-text\">5 = 5</code><br/>\n<code class=\"language-text\">4 = 2 * 2</code><br/>\n<code class=\"language-text\">2 = 2</code><br/></p>\n<p>Alright, that looks promising, let's see if it is true for the answer we know.\nThe prime factors of <code class=\"language-text\">2520</code> are<br/><code class=\"language-text\">[ 2, 2, 2, 3, 3, 5, 7 ]</code><br/>with factors of <br/><code class=\"language-text\">[2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 14, 15, 18, 20, 21, 24, 28, 30, 35, 36, 40, 42, 45, 56, 60, 63, 70, 72, 84, 90, 105, 120, 126, 140, 168, 180, 210, 252, 280, 315, 360, 420, 504, 630, 840, 1260 ]</code>.<br/>Well, it looks like every factor can still be represented through one or more products of prime factors.</p>\n<p>Now that information sounds interesting, but is it useful? Let's look at the prime factors of <code class=\"language-text\">2-10</code>.<br/>\n2: <code class=\"language-text\">[2]</code><br/>\n3: <code class=\"language-text\">[3]</code><br/>\n4: <code class=\"language-text\">[2, 2]</code><br/>\n5: <code class=\"language-text\">[5]</code><br/>\n6: <code class=\"language-text\">[2, 3]</code><br/>\n7: <code class=\"language-text\">[7]</code><br/>\n8: <code class=\"language-text\">[2, 2, 2]</code><br/>\n9: <code class=\"language-text\">[3, 3]</code><br/>\n10: <code class=\"language-text\">[2, 5]</code><br/></p>\n<p>Let's see what happens if we put the unique prime factors of <code class=\"language-text\">2-10</code> together.<br/>\n<code class=\"language-text\">[ 2, 2, 2, 3, 3, 5, 7 ]</code><br/>\nSuspicious...and if we multiply all the unique prime factors together, we get 2520.</p>\n<p>Well, it looks like if we take the collection of unique prime numbers (<code class=\"language-text\">[2, 3]</code> and <code class=\"language-text\">[2, 2]</code> becomes <code class=\"language-text\">[2, 2, 3]</code>) then we've got a representation of the smallest number divisible by all of the elements.</p>\n<p>So what might the code look like?</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">getSolution</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>    \n  <span class=\"token keyword\">var</span> n <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> factors <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> fact <span class=\"token operator\">=</span> <span class=\"token function\">getPrimeFactors</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> tempFactors <span class=\"token operator\">=</span> factors<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;</span>fact<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">var</span> index <span class=\"token operator\">=</span> tempFactors<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>fact<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        tempFactors<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n        factors<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>fact<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> factors<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">acc<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> arr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> acc <span class=\"token operator\">*</span> val<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Store all the unique factors in an array, get the product using an <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce?v=control\">Array.prototype.reduce</a>.</p>\n<p>\"I'll never use this in my life!\" I exclaimed while learning prime factors. Good thing I remembered it, turned out to be fun.</p>\n<p>I wonder what else I was missing out on...</p>","frontmatter":{"title":"Let's Solve Project Euler Problem 5","date":"June 15, 2017","description":"Euler Problem 5"}}},"pageContext":{"slug":"/project-euler-5/","previous":{"fields":{"slug":"/project-euler-4/"},"frontmatter":{"title":"Let's Solve Project Euler Problem 4"}},"next":{"fields":{"slug":"/project-euler-6/"},"frontmatter":{"title":"Let's Solve Project Euler Problem 6"}}}},"staticQueryHashes":["1246554614","2841359383"]}