{"componentChunkName":"component---src-templates-blog-post-js","path":"/project-euler-7/","result":{"data":{"site":{"siteMetadata":{"title":"Contemplating Imponderables"}},"markdownRemark":{"id":"fe8fb504-7595-5902-921a-a9ed191b650d","excerpt":"10001st prime By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.\nWhat is the 10 001st prime number? Nothing we…","html":"<h3>10001st prime</h3>\n<blockquote>\n<p>By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.<br/>\nWhat is the 10 001st prime number?</p>\n</blockquote>\n<p>Nothing we haven’t seen before, two immediate approaches:</p>\n<ul>\n<li>Iterate and check primality</li>\n</ul>\n<p>{% highlight javascript %}\nfunction isPrime(n){\nvar half = Math.floor(n/2);\nfor(var i=2; i&#x3C;=half; i++){\nif(n%i === 0)\nreturn false;\n}\nreturn true;\n}</p>\n<p>  function getSolution(){\nvar n = 10001;\nvar primes = [2];\nvar i = 3;\nwhile(primes.length &#x3C; n){\nif(isPrime(i))\nprimes.push(i);\ni+=2;\n}\nreturn primes[primes.length - 1];\n}\n{% endhighlight %}</p>\n<p>Average of 1000 iterations is: 1139.2023500000003 ms.</p>\n<ul>\n<li>\n<p><a href=\"https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\">Sieve of Eratosthenes</a>.\n{% highlight javascript %}\nfunction sievePrimes(n){\nvar arr = [];\nvar primes = [2];\nfor(var i=0; i&#x3C;n; i++){\narr[i] = true;\n}\narr[0] = false;\narr[1] = false;\narr[2] = false;\nfor(var i=3; i&#x3C;n;i+=2){\nif(arr[i] !== false){\narr[i] = false;\nprimes.push(i);\nfor(var j=i; j&#x3C;n;j+=i){\narr[j] = false;\n}\n}\n}\nreturn primes;\n}</p>\n<p>function getPrime(){\nvar primes = sievePrimes(110000);\nreturn primes[10000];\n}\n{% endhighlight %}</p>\n</li>\n</ul>\n<p>Average of 1000 iterations: 10.9280475 ms. Please note the low bound of the sieve.<br/>\nIf we decide to increase sieve size to something we can say safely contains the prime we want (instead of a nice fairly-close bound), let’s say 1100000 (10x the initial 110000), then our new average is 106.47139999999999 ms.<br/>\nSo it looks like the Sieve is faster if we can estimate the upper-bound of the prime number reasonably well.<br/>\nCan we estimate the upper bound of the prime to a reasonable limit?<br/>\n<a href=\"https://codereview.stackexchange.com/questions/90813/finding-the-nth-prime\">I think so!</a>. It looks as simple as $$ n * (ln(n)+2) $$<br/>\nLet’s see what that looks like and how that operates!</p>\n<p>{% highlight javascript %}\nfunction sievePrimes(n){\nvar arr = [];\nvar primes = [2];\nfor(var i=0; i&#x3C;n; i++){\narr[i] = true;\n}\narr[0] = false;\narr[1] = false;\narr[2] = false;\nfor(var i=3; i&#x3C;n;i+=2){\nif(arr[i] !== false){\narr[i] = false;\nprimes.push(i);\nfor(var j=i; j&#x3C;n;j+=i){\narr[j] = false;\n}\n}\n}\nreturn primes;\n}</p>\n<p>  function getPrime(){\nvar n = 10000;\nvar estimate = n * (Math.log(n)+2);\nvar primes = sievePrimes(estimate);\nreturn primes[10000];\n}\n{% endhighlight %}</p>\n<p>With an average run time of: 12.396499999999998 ms.<br/>\nAlrighty, so now we can use the more efficient Sieve with a fairly accurate upper-bound on the prime numbers for an adequate runtime.</p>","frontmatter":{"title":"Let's Solve Project Euler Problem 7","date":"June 19, 2017","description":"Euler Problem 7"}}},"pageContext":{"slug":"/project-euler-7/","previous":{"fields":{"slug":"/project-euler-6/"},"frontmatter":{"title":"Let's Solve Project Euler Problem 6"}},"next":{"fields":{"slug":"/project-euler-8/"},"frontmatter":{"title":"Let's Solve Project Euler Problem 8"}}}},"staticQueryHashes":["1246554614","2841359383"]}