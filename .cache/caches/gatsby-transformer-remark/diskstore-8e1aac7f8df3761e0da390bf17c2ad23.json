{"expireTime":9007200850441420000,"key":"transformer-remark-markdown-html-ast-bd2be2d9a41264c63cfa677060b397bc-gatsby-remark-prismjs-","val":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Wow, ","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":6,"offset":5}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"THREE","position":{"start":{"line":1,"column":7,"offset":6},"end":{"line":1,"column":12,"offset":11}}}],"position":{"start":{"line":1,"column":6,"offset":5},"end":{"line":1,"column":13,"offset":12}}},{"type":"text","value":" posts in one day?","position":{"start":{"line":1,"column":13,"offset":12},"end":{"line":1,"column":31,"offset":30}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":31,"offset":30}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Largest prime factor","position":{"start":{"line":3,"column":5,"offset":36},"end":{"line":3,"column":25,"offset":56}}}],"position":{"start":{"line":3,"column":1,"offset":32},"end":{"line":3,"column":25,"offset":56}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The prime factors of 13195 are 5, 7, 13 and 29.","position":{"start":{"line":4,"column":2,"offset":58},"end":{"line":4,"column":49,"offset":105}}},{"type":"raw","value":"<br/>","position":{"start":{"line":4,"column":49,"offset":105},"end":{"line":4,"column":54,"offset":110}}},{"type":"text","value":"\nWhat is the largest prime factor of the number 600851475143 ?","position":{"start":{"line":4,"column":54,"offset":110},"end":{"line":5,"column":63,"offset":173}}}],"position":{"start":{"line":4,"column":2,"offset":58},"end":{"line":5,"column":63,"offset":173}}},{"type":"text","value":"\n"}],"position":{"start":{"line":4,"column":1,"offset":57},"end":{"line":5,"column":63,"offset":173}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Well, 600851475143 is a pretty large number, but it doesn't require any special coercions yet. 12 digits is reasonable.","position":{"start":{"line":7,"column":1,"offset":175},"end":{"line":7,"column":120,"offset":294}}}],"position":{"start":{"line":7,"column":1,"offset":175},"end":{"line":7,"column":120,"offset":294}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"The Fool begins his journey","position":{"start":{"line":9,"column":6,"offset":301},"end":{"line":9,"column":33,"offset":328}}}],"position":{"start":{"line":9,"column":1,"offset":296},"end":{"line":9,"column":33,"offset":328}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Oh, Oh, I know, I know! Let's just do an iteration, modulus, check primality, and store the highest! Maybe something like...","position":{"start":{"line":10,"column":1,"offset":329},"end":{"line":10,"column":125,"offset":453}}}],"position":{"start":{"line":10,"column":1,"offset":329},"end":{"line":10,"column":125,"offset":453}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">isPrime</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">%</span> i <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getLargestPrimeFactor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> largest <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">%</span> i <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isPrime</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      largest <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> largest<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":12,"column":1,"offset":455},"end":{"line":28,"column":4,"offset":736}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Alrighty, let's try a smaller input we're aware of the answer for: 13195.","position":{"start":{"line":30,"column":1,"offset":738},"end":{"line":30,"column":74,"offset":811}}}],"position":{"start":{"line":30,"column":1,"offset":738},"end":{"line":30,"column":74,"offset":811}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The average from 100 iterations took\n0.21744999999999962 ms","position":{"start":{"line":32,"column":1,"offset":813},"end":{"line":33,"column":23,"offset":872}}}],"position":{"start":{"line":32,"column":1,"offset":813},"end":{"line":33,"column":23,"offset":872}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Well, that's taking quite a while and we still have 7 more digits to add! Let's see if we can find something better!","position":{"start":{"line":35,"column":1,"offset":874},"end":{"line":35,"column":117,"offset":990}}}],"position":{"start":{"line":35,"column":1,"offset":874},"end":{"line":35,"column":117,"offset":990}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"The Fool meets the Magician","position":{"start":{"line":37,"column":6,"offset":997},"end":{"line":37,"column":33,"offset":1024}}}],"position":{"start":{"line":37,"column":1,"offset":992},"end":{"line":37,"column":33,"offset":1024}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Let's try using that ","position":{"start":{"line":38,"column":1,"offset":1025},"end":{"line":38,"column":22,"offset":1046}}},{"type":"element","tagName":"a","properties":{"href":"https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes"},"children":[{"type":"text","value":"Sieve of Eratosthenes","position":{"start":{"line":38,"column":23,"offset":1047},"end":{"line":38,"column":44,"offset":1068}}}],"position":{"start":{"line":38,"column":22,"offset":1046},"end":{"line":38,"column":98,"offset":1122}}},{"type":"text","value":" I like so much. Will the right tool help?","position":{"start":{"line":38,"column":98,"offset":1122},"end":{"line":38,"column":140,"offset":1164}}}],"position":{"start":{"line":38,"column":1,"offset":1025},"end":{"line":38,"column":140,"offset":1164}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">sievePrimes</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> primes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  arr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  arr<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">+=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n      primes<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> j<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>j<span class=\"token operator\">+=</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>    \n  <span class=\"token keyword\">return</span> primes<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> primes <span class=\"token operator\">=</span> <span class=\"token function\">sievePrimes</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">isPrime</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>primes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>primes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> n<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>primes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> n<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getLargestPrimeFactor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> largest <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">%</span> i <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isPrime</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      largest <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> largest<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":40,"column":1,"offset":1166},"end":{"line":80,"column":4,"offset":1897}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"the average iteration from 100 took:\n0.14749999999999885 ms","position":{"start":{"line":82,"column":1,"offset":1899},"end":{"line":83,"column":23,"offset":1958}}}],"position":{"start":{"line":82,"column":1,"offset":1899},"end":{"line":83,"column":23,"offset":1958}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Alrighty. We've got an improvement on our small N. We've also tackled the issue of determining primality for larger numbers which will become evident with larger inputs.","position":{"start":{"line":85,"column":1,"offset":1960},"end":{"line":85,"column":170,"offset":2129}}}],"position":{"start":{"line":85,"column":1,"offset":1960},"end":{"line":85,"column":170,"offset":2129}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"The Fool meets the High Priestess","position":{"start":{"line":87,"column":6,"offset":2136},"end":{"line":87,"column":39,"offset":2169}}}],"position":{"start":{"line":87,"column":1,"offset":2131},"end":{"line":87,"column":39,"offset":2169}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Let's calm down, take a step back and figure out what we actually want.\nThe largest prime factor. So we need to find primes and determine if they are factors, or find factors and determine if they are prime...right?\nWhy not just find the prime factors directly?","position":{"start":{"line":88,"column":1,"offset":2170},"end":{"line":90,"column":46,"offset":2431}}}],"position":{"start":{"line":88,"column":1,"offset":2170},"end":{"line":90,"column":46,"offset":2431}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">getSolution</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> n <span class=\"token operator\">=</span> <span class=\"token number\">600851475143</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> half <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>half<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">%</span>i <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">//divide the number by the factor</span>\n      n <span class=\"token operator\">=</span> n<span class=\"token operator\">/</span>i<span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">//The last factor will be the largest</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span>\n      i<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//make sure duplicate factors are caught</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":92,"column":1,"offset":2433},"end":{"line":107,"column":4,"offset":2775}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Iterate up until half of the number.","position":{"start":{"line":109,"column":4,"offset":2780},"end":{"line":109,"column":40,"offset":2816}}}],"position":{"start":{"line":109,"column":1,"offset":2777},"end":{"line":109,"column":40,"offset":2816}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"There is no way ∃ n ∋ k/2 < n < k && k % n == 0 where n and k are integers.","position":{"start":{"line":110,"column":5,"offset":2821},"end":{"line":110,"column":80,"offset":2896}}}],"position":{"start":{"line":110,"column":1,"offset":2817},"end":{"line":110,"column":80,"offset":2896}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"i will iterate until half of n, bumping into all of the factors along the way.","position":{"start":{"line":111,"column":4,"offset":2900},"end":{"line":111,"column":82,"offset":2978}}}],"position":{"start":{"line":111,"column":1,"offset":2897},"end":{"line":111,"column":82,"offset":2978}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Starting the count at 2, we ensure all the small primes are removed first. 10/2 == 5.","position":{"start":{"line":112,"column":5,"offset":2983},"end":{"line":112,"column":90,"offset":3068}}}],"position":{"start":{"line":112,"column":1,"offset":2979},"end":{"line":112,"column":90,"offset":3068}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Removing factors significantly reduces the number of iterations required (10000 / 2 == 5000, we've already split the numbers we must iterate through in half!)","position":{"start":{"line":113,"column":5,"offset":3073},"end":{"line":113,"column":163,"offset":3231}}}],"position":{"start":{"line":113,"column":1,"offset":3069},"end":{"line":113,"column":163,"offset":3231}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"By removing every factor incrementally, we can ensure there is no smaller i for which n is divisible. 20 is divisible by 10, but it's also divisible by 2. 20 / 2 == 10 --> 10 / 2 == 5 --> any non-prime number won't appear.","position":{"start":{"line":114,"column":5,"offset":3236},"end":{"line":114,"column":227,"offset":3458}}}],"position":{"start":{"line":114,"column":1,"offset":3232},"end":{"line":114,"column":227,"offset":3458}}},{"type":"text","value":"\n"}],"position":{"start":{"line":109,"column":1,"offset":2777},"end":{"line":114,"column":227,"offset":3458}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For the same input (13195), the average iteration took:\n0.0012000000000000454 ms","position":{"start":{"line":116,"column":1,"offset":3460},"end":{"line":117,"column":25,"offset":3540}}}],"position":{"start":{"line":116,"column":1,"offset":3460},"end":{"line":117,"column":25,"offset":3540}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Well, that's an entirely different tier of improvement!","position":{"start":{"line":119,"column":1,"offset":3542},"end":{"line":119,"column":56,"offset":3597}}}],"position":{"start":{"line":119,"column":1,"offset":3542},"end":{"line":119,"column":56,"offset":3597}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Let's try it with our large input (600851475143).\naverage iteration:\n0.1238499999999999 ms","position":{"start":{"line":121,"column":1,"offset":3599},"end":{"line":123,"column":22,"offset":3689}}}],"position":{"start":{"line":121,"column":1,"offset":3599},"end":{"line":123,"column":22,"offset":3689}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Well it looks like our final solution works faster on the 12 digit input than our initial solution did on the 5 digit input. I'll call that an improvement.","position":{"start":{"line":125,"column":1,"offset":3691},"end":{"line":125,"column":156,"offset":3846}}}],"position":{"start":{"line":125,"column":1,"offset":3691},"end":{"line":125,"column":156,"offset":3846}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":126,"column":1,"offset":3847}}}}