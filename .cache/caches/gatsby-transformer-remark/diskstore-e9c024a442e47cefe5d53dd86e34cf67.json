{"expireTime":9007200850440922000,"key":"transformer-remark-markdown-ast-8d2dfc50badbbffd460e4b05ac3c6010-gatsby-remark-prismjs-","val":{"type":"root","children":[{"type":"html","value":"<style>\n  .number-block{\n    text-align: center;\n  }\n  .red{\n    color: red;\n  }\n  #example-anchor span{\n    margin: 5px\n  }\n\n  .current{\n    background: yellow;\n  }\n\n  .highest{\n    background: green;\n  }\n</style>","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":19,"column":9,"offset":214},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Largest product in a grid","position":{"start":{"line":22,"column":5,"offset":221},"end":{"line":22,"column":30,"offset":246},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":217},"end":{"line":22,"column":30,"offset":246},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"In the 20×20 grid below, four numbers along a diagonal line have been marked in red.","position":{"start":{"line":23,"column":2,"offset":248},"end":{"line":23,"column":86,"offset":332},"indent":[]}},{"type":"html","value":"<br/>","position":{"start":{"line":23,"column":86,"offset":332},"end":{"line":23,"column":91,"offset":337},"indent":[]}}],"position":{"start":{"line":23,"column":2,"offset":248},"end":{"line":23,"column":91,"offset":337},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":247},"end":{"line":23,"column":91,"offset":337},"indent":[]}},{"type":"html","value":"<div class=\"number-block\">\n08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08<br/>\n49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00<br/>\n81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65<br/>\n52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91<br/>\n22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80<br/>\n24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50<br/>\n32 98 81 28 64 23 67 10 <span class=\"red\">26</span> 38 40 67 59 54 70 66 18 38 64 70<br/>\n67 26 20 68 02 62 12 20 95 <span class=\"red\">63</span> 94 39 63 08 40 91 66 49 94 21<br/>\n24 55 58 05 66 73 99 26 97 17 <span class=\"red\">78</span> 78 96 83 14 88 34 89 63 72<br/>\n21 36 23 09 75 00 76 44 20 45 35 <span class=\"red\">14</span> 00 61 33 97 34 31 33 95<br/>\n78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92<br/>\n16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57<br/>\n86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58<br/>\n19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40<br/>\n04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66<br/>\n88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69<br/>\n04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36<br/>\n20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16<br/>\n20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54<br/>\n01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48<br/>\n</div>\n>The product of these numbers is 26 × 63 × 78 × 14 = 1788696.\nWhat is the greatest product of four adjacent numbers in the same direction (up, down, left, right, or diagonally) in the 20×20 grid?","position":{"start":{"line":24,"column":1,"offset":338},"end":{"line":47,"column":134,"offset":1967},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"I'm not fond of the words \"up\" being paired with \"down\", and \"left\" being paired with \"right\". That sounds like a trap for over-iteration!","position":{"start":{"line":49,"column":1,"offset":1969},"end":{"line":49,"column":139,"offset":2107},"indent":[]}},{"type":"html","value":"<br/>","position":{"start":{"line":49,"column":139,"offset":2107},"end":{"line":49,"column":144,"offset":2112},"indent":[]}},{"type":"text","value":"\nIf we go through each number, we ","position":{"start":{"line":49,"column":144,"offset":2112},"end":{"line":50,"column":34,"offset":2146},"indent":[1]}},{"type":"strong","children":[{"type":"text","value":"don't","position":{"start":{"line":50,"column":36,"offset":2148},"end":{"line":50,"column":41,"offset":2153},"indent":[]}}],"position":{"start":{"line":50,"column":34,"offset":2146},"end":{"line":50,"column":43,"offset":2155},"indent":[]}},{"type":"text","value":" need to compare each of the 8 directions, that's just too much. I say we only compare 4.","position":{"start":{"line":50,"column":43,"offset":2155},"end":{"line":50,"column":132,"offset":2244},"indent":[]}},{"type":"html","value":"<br/>","position":{"start":{"line":50,"column":132,"offset":2244},"end":{"line":50,"column":137,"offset":2249},"indent":[]}},{"type":"text","value":"\nIf we look at the left-most numbers on the top: 08, 49, 81, 52. We can see that comparing \"down\" from 08 is the same as comparing \"up\" from 52. The same goes for left/right, upright/downleft, and upleft/downright. We only need to pick one from each pair and we've got a good representation.","position":{"start":{"line":50,"column":137,"offset":2249},"end":{"line":51,"column":291,"offset":2540},"indent":[1]}}],"position":{"start":{"line":49,"column":1,"offset":1969},"end":{"line":51,"column":291,"offset":2540},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"For starters, I'd like to massage the input into a 2d array, in this example I'm assuming the input is space-separated numbers.","position":{"start":{"line":53,"column":1,"offset":2542},"end":{"line":53,"column":128,"offset":2669},"indent":[]}}],"position":{"start":{"line":53,"column":1,"offset":2542},"end":{"line":53,"column":128,"offset":2669},"indent":[]}},{"type":"html","lang":"javascript","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">createArray</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">input</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> tempArr <span class=\"token operator\">=</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> length <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>tempArr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tempArr<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> arrString <span class=\"token operator\">=</span> <span class=\"token string\">\"08 02 22 ...\"</span>\n<span class=\"token keyword\">var</span> arr2d <span class=\"token operator\">=</span> <span class=\"token function\">createArray</span><span class=\"token punctuation\">(</span>arrString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":55,"column":1,"offset":2671},"end":{"line":72,"column":4,"offset":3079},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Then let's create some helper functions for retrieving the products along those four directions we determined (Please note, the getProducts are safeguarded against accessing out-of-bounds by returning 0):","position":{"start":{"line":74,"column":1,"offset":3081},"end":{"line":74,"column":205,"offset":3285},"indent":[]}}],"position":{"start":{"line":74,"column":1,"offset":3081},"end":{"line":74,"column":205,"offset":3285},"indent":[]}},{"type":"html","lang":"javascript","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">getRightProduct</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> x</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">+</span><span class=\"token number\">4</span> <span class=\"token operator\">></span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> product <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    product <span class=\"token operator\">*=</span> arr<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>x<span class=\"token operator\">+</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> product<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getDownProduct</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> x</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>y<span class=\"token operator\">+</span><span class=\"token number\">4</span> <span class=\"token operator\">></span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> product <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    product <span class=\"token operator\">*=</span> arr<span class=\"token punctuation\">[</span>y<span class=\"token operator\">+</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> product<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getDownRightProduct</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> x</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>y<span class=\"token operator\">+</span><span class=\"token number\">4</span> <span class=\"token operator\">></span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">||</span> x<span class=\"token operator\">+</span><span class=\"token number\">4</span> <span class=\"token operator\">></span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> product <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    product <span class=\"token operator\">*=</span> arr<span class=\"token punctuation\">[</span>y<span class=\"token operator\">+</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>x<span class=\"token operator\">+</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> product<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getDownLeftProduct</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> x</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>y<span class=\"token operator\">+</span><span class=\"token number\">4</span> <span class=\"token operator\">></span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">||</span> x<span class=\"token operator\">-</span><span class=\"token number\">3</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> product <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    product <span class=\"token operator\">*=</span> arr<span class=\"token punctuation\">[</span>y<span class=\"token operator\">+</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>x<span class=\"token operator\">-</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> product<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":76,"column":1,"offset":3287},"end":{"line":116,"column":4,"offset":4032},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"And then we tie everything together:","position":{"start":{"line":118,"column":1,"offset":4034},"end":{"line":118,"column":37,"offset":4070},"indent":[]}}],"position":{"start":{"line":118,"column":1,"offset":4034},"end":{"line":118,"column":37,"offset":4070},"indent":[]}},{"type":"html","lang":"javascript","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">getSolution</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token string\">\"08 02 22 ...\"</span>\n  <span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token function\">createArray</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> highest <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">var</span> right <span class=\"token operator\">=</span> <span class=\"token function\">getRightProduct</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">var</span> down <span class=\"token operator\">=</span> <span class=\"token function\">getDownProduct</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">var</span> downRight <span class=\"token operator\">=</span> <span class=\"token function\">getDownRightProduct</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">var</span> downLeft <span class=\"token operator\">=</span> <span class=\"token function\">getDownLeftProduct</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">var</span> tempMax <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">,</span> down<span class=\"token punctuation\">,</span> downRight<span class=\"token punctuation\">,</span> downLeft<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      highest <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>tempMax <span class=\"token operator\">></span> highest<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> tempMax <span class=\"token operator\">:</span> highest<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> highest<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":120,"column":1,"offset":4072},"end":{"line":137,"column":4,"offset":4614},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"html","value":"<div id=\"example-anchor\" class=\"number-block\"></div>\n<div id=\"current-anchor\"></div>\n<div id=\"highest-anchor\"></div>\n<button id=\"run-demo\">Run Demo</button>","position":{"start":{"line":139,"column":1,"offset":4616},"end":{"line":142,"column":40,"offset":4772},"indent":[1,1,1]}},{"type":"html","value":"<script>\n  function getRightProduct(arr, y, x){\n    if(x+4 > arr.length)\n      return 0;\n    var product = 1;\n    for(var i=0; i<4; i++){\n      product *= arr[y][x+i];\n    }\n    return product;\n  }\n\n  function getDownProduct(arr, y, x){\n    if(y+4 > arr.length)\n      return 0;\n    var product = 1;\n    for(var i=0; i<4; i++){\n      product *= arr[y+i][x];\n    }\n    return product;\n  }\n\n  function getDownRightProduct(arr, y, x){\n    if(y+4 > arr.length || x+4 > arr.length)\n      return 0;\n    var product = 1;\n    for(var i=0; i<4; i++){\n      product *= arr[y+i][x+i];\n    }\n    return product;\n  }\n\n  function getDownLeftProduct(arr, y, x){\n    if(y+4 > arr.length || x-3 < 0)\n      return 0;\n    var product = 1;\n    for(var i=0; i<4; i++){\n      product *= arr[y+i][x-i];\n    }\n    return product;\n  }\n  function createArray(input){\n    var tempArr = input.split(\" \");\n    var length = Math.sqrt(tempArr.length);\n    var arr = new Array(length);\n    var count = 0;\n    for(var i=0; i<length; i++){\n      arr[i] = new Array(length);\n      for(var j=0; j<length; j++){\n        arr[i][j] = tempArr[count];\n        count++;\n      }\n    }\n    return arr;\n  }\n\n  var input = \"08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08 49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00 81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65 52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91 22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80 24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50 32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70 67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21 24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72 21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95 78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92 16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57 86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58 19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40 04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66 88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69 04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36 20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16 20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54 01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48\"\n  var newArr = createArray(input);\n  var target = document.getElementById(\"example-anchor\");\n  var row;\n  for(var i=0; i<newArr.length; i++){\n    row = document.createElement(\"div\");\n    row.setAttribute('class', 'row');\n    target.append(row);\n    var elem;\n    for(var j=0; j<newArr[i].length; j++){\n      elem = document.createElement(\"span\");\n      elem.setAttribute('id', 'num-'+i+\"-\"+j);\n      elem.textContent = newArr[i][j];\n      row.append(elem);\n    }\n  }\n  function runDemo(){\n    var anchor = document.getElementById(\"example-anchor\");\n    var currentValue = document.getElementById(\"current-anchor\");\n    var highest = document.getElementById(\"highest-anchor\");\n    var input = \"08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08 49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00 81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65 52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91 22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80 24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50 32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70 67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21 24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72 21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95 78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92 16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57 86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58 19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40 04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66 88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69 04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36 20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16 20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54 01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48\"\n    var arr = createArray(input);\n    var highest = 0;\n    var timer = 0;\n    for(var i=0; i<arr.length; i++){\n      for(var j=0; j<arr[i].length; j++){\n        (function(i,j,timer){\n          setTimeout(function(){\n              var currentClasses = document.getElementsByClassName(\"current\");\n              while(currentClasses.length > 0){\n                currentClasses.item(0).classList.remove(\"current\");\n              }\n              document.getElementById(\"num-\"+i+\"-\"+j).classList.add(\"current\");\n              var right = getRightProduct(arr, j, i);\n              var down = getDownProduct(arr, j, i);\n              var downRight = getDownRightProduct(arr, j, i);\n              var downLeft = getDownLeftProduct(arr, j, i);\n              document.getElementById(\"current-anchor\").innerHTML = \"right:\"+right+\"<br/>\"+\n                                                                    \"down:\"+down+\"<br/>\"+\n                                                                    \"downRight:\"+downRight+\"<br/>\"+\n                                                                    \"downLeft:\"+downLeft\n              var tempMax = Math.max(right, down, downRight, downLeft);\n              if(tempMax > highest){\n                var highestClasses = document.getElementsByClassName(\"highest\");\n                while(highestClasses.length > 0){\n                  highestClasses.item(0).classList.remove(\"highest\");\n                }\n                document.getElementById(\"num-\"+i+\"-\"+j).classList.add(\"highest\");\n                switch(tempMax){\n                  case right:\n                    document.getElementById(\"num-\"+i+\"-\"+(j+1)).classList.add(\"highest\");\n                    document.getElementById(\"num-\"+i+\"-\"+(j+2)).classList.add(\"highest\");\n                    document.getElementById(\"num-\"+i+\"-\"+(j+3)).classList.add(\"highest\");\n                    break;\n                  case down:\n                    document.getElementById(\"num-\"+(i+1)+\"-\"+j).classList.add(\"highest\");\n                    document.getElementById(\"num-\"+(i+2)+\"-\"+j).classList.add(\"highest\");\n                    document.getElementById(\"num-\"+(i+3)+\"-\"+j).classList.add(\"highest\");\n                    break;\n                  case downRight:\n                    document.getElementById(\"num-\"+(i+1)+\"-\"+(j+1)).classList.add(\"highest\");\n                    document.getElementById(\"num-\"+(i+2)+\"-\"+(j+2)).classList.add(\"highest\");\n                    document.getElementById(\"num-\"+(i+3)+\"-\"+(j+3)).classList.add(\"highest\");\n                    break;\n                  case downLeft:\n                    document.getElementById(\"num-\"+(i+1)+\"-\"+(j-1)).classList.add(\"highest\");\n                    document.getElementById(\"num-\"+(i+2)+\"-\"+(j-2)).classList.add(\"highest\");\n                    document.getElementById(\"num-\"+(i+3)+\"-\"+(j- 3)).classList.add(\"highest\");\n                    break;\n                }\n                document.getElementById(\"highest-anchor\").innerHTML = \"Highest:\"+tempMax;\n              }\n              highest = (tempMax > highest) ? tempMax : highest;\n            }, timer)\n          })(i,j,timer)\n        timer += 100;\n      }\n    }\n    setTimeout(function(){\n        var currentClasses = document.getElementsByClassName(\"current\");\n        while(currentClasses.length > 0){\n          currentClasses.item(0).classList.remove(\"current\");\n        }\n      }, timer+50)\n    return highest;\n  }\n  document.getElementById(\"run-demo\").onclick = runDemo;\n</script>","position":{"start":{"line":144,"column":1,"offset":4774},"end":{"line":286,"column":10,"offset":12528},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":287,"column":1,"offset":12529}}}}