{"expireTime":9007200850441420000,"key":"transformer-remark-markdown-ast-d37ecc112ffa8c7042e4273bc97cb462-gatsby-remark-prismjs-","val":{"type":"root","children":[{"type":"heading","depth":3,"children":[{"type":"text","value":"10001st prime","position":{"start":{"line":2,"column":5,"offset":5},"end":{"line":2,"column":18,"offset":18},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":18,"offset":18},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.","position":{"start":{"line":3,"column":2,"offset":20},"end":{"line":3,"column":102,"offset":120},"indent":[]}},{"type":"html","value":"<br/>","position":{"start":{"line":3,"column":102,"offset":120},"end":{"line":3,"column":107,"offset":125},"indent":[]}},{"type":"text","value":"\nWhat is the 10 001st prime number?","position":{"start":{"line":3,"column":107,"offset":125},"end":{"line":4,"column":35,"offset":160},"indent":[1]}}],"position":{"start":{"line":3,"column":2,"offset":20},"end":{"line":4,"column":35,"offset":160},"indent":[1]}}],"position":{"start":{"line":3,"column":1,"offset":19},"end":{"line":4,"column":35,"offset":160},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Nothing we haven't seen before, two immediate approaches:","position":{"start":{"line":6,"column":1,"offset":162},"end":{"line":6,"column":58,"offset":219},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":162},"end":{"line":6,"column":58,"offset":219},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Iterate and check primality","position":{"start":{"line":8,"column":3,"offset":223},"end":{"line":8,"column":30,"offset":250},"indent":[]}}],"position":{"start":{"line":8,"column":3,"offset":223},"end":{"line":8,"column":30,"offset":250},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":221},"end":{"line":8,"column":30,"offset":250},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":221},"end":{"line":8,"column":30,"offset":250},"indent":[]}},{"type":"html","lang":"javascript","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">isPrime</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> half <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span>half<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">%</span>i <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getSolution</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> n <span class=\"token operator\">=</span> <span class=\"token number\">10001</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> primes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>primes<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isPrime</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      primes<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    i<span class=\"token operator\">+=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> primes<span class=\"token punctuation\">[</span>primes<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":10,"column":1,"offset":252},"end":{"line":31,"column":4,"offset":605},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Average of 1000 iterations is: 1139.2023500000003 ms.","position":{"start":{"line":33,"column":1,"offset":607},"end":{"line":33,"column":54,"offset":660},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":607},"end":{"line":33,"column":54,"offset":660},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes","children":[{"type":"text","value":"Sieve of Eratosthenes","position":{"start":{"line":35,"column":4,"offset":665},"end":{"line":35,"column":25,"offset":686},"indent":[]}}],"position":{"start":{"line":35,"column":3,"offset":664},"end":{"line":35,"column":79,"offset":740},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":35,"column":79,"offset":740},"end":{"line":35,"column":80,"offset":741},"indent":[]}}],"position":{"start":{"line":35,"column":3,"offset":664},"end":{"line":35,"column":80,"offset":741},"indent":[]}},{"type":"html","lang":"javascript","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">sievePrimes</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> primes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\narr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\narr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\narr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\narr<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">+=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  primes<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> j<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>j<span class=\"token operator\">+=</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">return</span> primes<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":36,"column":1,"offset":742},"end":{"line":56,"column":2,"offset":1106},"indent":[1,3,3,3,5,3,3,3,3,3,5,5,5,5,5,5,5,3,3,1]}}],"position":{"start":{"line":35,"column":1,"offset":662},"end":{"line":56,"column":2,"offset":1106},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}}],"position":{"start":{"line":35,"column":1,"offset":662},"end":{"line":56,"column":2,"offset":1106},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"function getPrime(){\n  var primes = sievePrimes(110000);\n  return primes","position":{"start":{"line":58,"column":1,"offset":1108},"end":{"line":60,"column":16,"offset":1180},"indent":[1,1]}},{"type":"linkReference","identifier":"10000","label":"10000","referenceType":"shortcut","children":[{"type":"text","value":"10000","position":{"start":{"line":60,"column":17,"offset":1181},"end":{"line":60,"column":22,"offset":1186},"indent":[]}}],"position":{"start":{"line":60,"column":16,"offset":1180},"end":{"line":60,"column":23,"offset":1187},"indent":[]}},{"type":"text","value":";\n}","position":{"start":{"line":60,"column":23,"offset":1187},"end":{"line":61,"column":2,"offset":1190},"indent":[1]}}],"position":{"start":{"line":58,"column":1,"offset":1108},"end":{"line":61,"column":2,"offset":1190},"indent":[1,1,1]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Average of 1000 iterations: 10.9280475 ms. Please note the low bound of the sieve.&lt;br/&gt;\nIf we decide to increase sieve size to something we can say safely contains the prime we want (instead of a nice fairly-close bound), let&#39;s say 1100000 (10x the initial 110000), then our new average is 106.47139999999999 ms.&lt;br/&gt;\nSo it looks like the Sieve is faster if we can estimate the upper-bound of the prime number reasonably well.&lt;br/&gt;\nCan we estimate the upper bound of the prime to a reasonable limit?&lt;br/&gt;\n[I think so!](https://codereview.stackexchange.com/questions/90813/finding-the-nth-prime). It looks as simple as $$ n * (ln(n)+2) $$&lt;br/&gt;\nLet&#39;s see what that looks like and how that operates!\n\n```javascript\nfunction sievePrimes(n){\n  var arr = [];\n  var primes = [2];\n  for(var i=0; i&lt;n; i++){\n    arr[i] = true;\n  }\n  arr[0] = false;\n  arr[1] = false;\n  arr[2] = false;\n  for(var i=3; i&lt;n;i+=2){\n    if(arr[i] !== false){\n      arr[i] = false;\n      primes.push(i);\n      for(var j=i; j&lt;n;j+=i){\n        arr[j] = false;\n      }\n    }\n  }\n  return primes;\n}\n\nfunction getPrime(){\n  var n = 10000;\n  var estimate = n * (Math.log(n)+2);\n  var primes = sievePrimes(estimate);\n  return primes[10000];\n}</code></pre></div>","position":{"start":{"line":62,"column":1,"offset":1191},"end":{"line":99,"column":4,"offset":2403},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"With an average run time of: 12.396499999999998 ms.","position":{"start":{"line":101,"column":1,"offset":2405},"end":{"line":101,"column":52,"offset":2456},"indent":[]}},{"type":"html","value":"<br/>","position":{"start":{"line":101,"column":52,"offset":2456},"end":{"line":101,"column":57,"offset":2461},"indent":[]}},{"type":"text","value":"\nAlrighty, so now we can use the more efficient Sieve with a fairly accurate upper-bound on the prime numbers for an adequate runtime.","position":{"start":{"line":101,"column":57,"offset":2461},"end":{"line":102,"column":134,"offset":2595},"indent":[1]}}],"position":{"start":{"line":101,"column":1,"offset":2405},"end":{"line":102,"column":134,"offset":2595},"indent":[1]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":103,"column":1,"offset":2596}}}}