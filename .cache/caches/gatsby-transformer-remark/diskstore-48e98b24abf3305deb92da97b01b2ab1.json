{"expireTime":9007200850443381000,"key":"transformer-remark-markdown-ast-674e1dbda45d7faac9b82383abae65e5-gatsby-remark-katexgatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-copy-linked-filesgatsby-remark-smartypantsgatsby-remark-prismjs-","val":{"type":"root","children":[{"type":"heading","depth":3,"children":[{"type":"text","value":"Longest Collatz sequence","position":{"start":{"line":2,"column":5,"offset":5},"end":{"line":2,"column":29,"offset":29},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":29,"offset":29},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"The following iterative sequence is defined for the set of positive integers:","position":{"start":{"line":3,"column":2,"offset":31},"end":{"line":3,"column":79,"offset":108},"indent":[]}},{"type":"html","value":"<br/>","position":{"start":{"line":3,"column":79,"offset":108},"end":{"line":3,"column":84,"offset":113},"indent":[]}},{"type":"html","value":"<br/>","position":{"start":{"line":3,"column":84,"offset":113},"end":{"line":3,"column":89,"offset":118},"indent":[]}},{"type":"text","value":"\nn → n/2 (n is even)","position":{"start":{"line":3,"column":89,"offset":118},"end":{"line":4,"column":20,"offset":138},"indent":[1]}},{"type":"html","value":"<br/>","position":{"start":{"line":4,"column":20,"offset":138},"end":{"line":4,"column":25,"offset":143},"indent":[]}},{"type":"text","value":"\nn → 3n + 1 (n is odd)","position":{"start":{"line":4,"column":25,"offset":143},"end":{"line":5,"column":22,"offset":165},"indent":[1]}},{"type":"html","value":"<br/>","position":{"start":{"line":5,"column":22,"offset":165},"end":{"line":5,"column":27,"offset":170},"indent":[]}},{"type":"html","value":"<br/>","position":{"start":{"line":5,"column":27,"offset":170},"end":{"line":5,"column":32,"offset":175},"indent":[]}},{"type":"text","value":"\nUsing the rule above and starting with 13, we generate the following sequence:","position":{"start":{"line":5,"column":32,"offset":175},"end":{"line":6,"column":79,"offset":254},"indent":[1]}},{"type":"html","value":"<br/>","position":{"start":{"line":6,"column":79,"offset":254},"end":{"line":6,"column":84,"offset":259},"indent":[]}},{"type":"html","value":"<br/>","position":{"start":{"line":6,"column":84,"offset":259},"end":{"line":6,"column":89,"offset":264},"indent":[]}},{"type":"text","value":"\n13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1","position":{"start":{"line":6,"column":89,"offset":264},"end":{"line":7,"column":43,"offset":307},"indent":[1]}},{"type":"html","value":"<br/>","position":{"start":{"line":7,"column":43,"offset":307},"end":{"line":7,"column":48,"offset":312},"indent":[]}},{"type":"html","value":"<br/>","position":{"start":{"line":7,"column":48,"offset":312},"end":{"line":7,"column":53,"offset":317},"indent":[]}},{"type":"text","value":"\nIt can be seen that this sequence (starting at 13 and finishing at 1) contains 10 terms. Although it has not been proved yet (Collatz Problem), it is thought that all starting numbers finish at 1.","position":{"start":{"line":7,"column":53,"offset":317},"end":{"line":8,"column":197,"offset":514},"indent":[1]}},{"type":"html","value":"<br/>","position":{"start":{"line":8,"column":197,"offset":514},"end":{"line":8,"column":202,"offset":519},"indent":[]}},{"type":"text","value":"\nWhich starting number, under one million, produces the longest chain?","position":{"start":{"line":8,"column":202,"offset":519},"end":{"line":9,"column":70,"offset":589},"indent":[1]}},{"type":"html","value":"<br/>","position":{"start":{"line":9,"column":70,"offset":589},"end":{"line":9,"column":75,"offset":594},"indent":[]}},{"type":"text","value":"\nNOTE: Once the chain starts the terms are allowed to go above one million.","position":{"start":{"line":9,"column":75,"offset":594},"end":{"line":10,"column":75,"offset":669},"indent":[1]}}],"position":{"start":{"line":3,"column":2,"offset":31},"end":{"line":10,"column":75,"offset":669},"indent":[1,1,1,1,1,1,1]}}],"position":{"start":{"line":3,"column":1,"offset":30},"end":{"line":10,"column":75,"offset":669},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Brute force:","position":{"start":{"line":12,"column":1,"offset":671},"end":{"line":12,"column":13,"offset":683},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":671},"end":{"line":12,"column":13,"offset":683},"indent":[]}},{"type":"html","lang":"javascript","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">getCollatzChainLength</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> chain <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> chainCount <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">!==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    chainCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">%</span><span class=\"token number\">2</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n      n <span class=\"token operator\">*=</span> <span class=\"token number\">0.5</span>\n    <span class=\"token keyword\">else</span>\n      n <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token operator\">*</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> chainCount<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getSolution</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> n <span class=\"token operator\">=</span> <span class=\"token number\">1000000</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> bestLength <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> bestNum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span>n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> chain <span class=\"token operator\">=</span> <span class=\"token function\">getCollatzChainLength</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>chain <span class=\"token operator\">></span> bestLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      bestLength <span class=\"token operator\">=</span> chain<span class=\"token punctuation\">;</span>\n      bestNum <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> bestNum<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":14,"column":1,"offset":685},"end":{"line":41,"column":4,"offset":1156},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Runtime (average of 100 iterations):","position":{"start":{"line":43,"column":1,"offset":1158},"end":{"line":43,"column":37,"offset":1194},"indent":[]}},{"type":"html","value":"<br/>","position":{"start":{"line":43,"column":37,"offset":1194},"end":{"line":43,"column":42,"offset":1199},"indent":[]}},{"type":"text","value":"\n2209.2250000000004 ms","position":{"start":{"line":43,"column":42,"offset":1199},"end":{"line":44,"column":22,"offset":1221},"indent":[1]}}],"position":{"start":{"line":43,"column":1,"offset":1158},"end":{"line":44,"column":22,"offset":1221},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Now let’s see what we can improve about this. Maybe something along the line of caching our previous Collatz lengths?","position":{"start":{"line":46,"column":1,"offset":1223},"end":{"line":46,"column":118,"offset":1340},"indent":[]}},{"type":"html","value":"<br/>","position":{"start":{"line":46,"column":118,"offset":1340},"end":{"line":46,"column":123,"offset":1345},"indent":[]}},{"type":"text","value":"\nLet’s look at the number ","position":{"start":{"line":46,"column":123,"offset":1345},"end":{"line":47,"column":26,"offset":1371},"indent":[1]}},{"type":"html","value":"<code class=\"language-text\">13</code>","position":{"start":{"line":47,"column":26,"offset":1371},"end":{"line":47,"column":30,"offset":1375},"indent":[]}},{"type":"text","value":", which has a length of 10. When we get to 26, we need to recalculate all 10 links of the 13 chain. That looks like it could be improved! Maybe with something like:","position":{"start":{"line":47,"column":30,"offset":1375},"end":{"line":47,"column":194,"offset":1539},"indent":[]}}],"position":{"start":{"line":46,"column":1,"offset":1223},"end":{"line":47,"column":194,"offset":1539},"indent":[1]}},{"type":"html","lang":"javascript","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> collatzLength <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getCollatzChainLength</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>collatzLength<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> collatzLength<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">%</span><span class=\"token number\">2</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> length <span class=\"token operator\">=</span> <span class=\"token function\">getCollatzChainLength</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">*</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    collatzLength<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> length<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> length<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> length <span class=\"token operator\">=</span> <span class=\"token function\">getCollatzChainLength</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token operator\">*</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    collatzLength<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> length<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> length<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":49,"column":1,"offset":1541},"end":{"line":65,"column":4,"offset":1909},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Updated runtime (average of 100 iterations):","position":{"start":{"line":67,"column":1,"offset":1911},"end":{"line":67,"column":45,"offset":1955},"indent":[]}},{"type":"html","value":"<br/>","position":{"start":{"line":67,"column":45,"offset":1955},"end":{"line":67,"column":50,"offset":1960},"indent":[]}},{"type":"text","value":"\n1191.455 ms","position":{"start":{"line":67,"column":50,"offset":1960},"end":{"line":68,"column":12,"offset":1972},"indent":[1]}}],"position":{"start":{"line":67,"column":1,"offset":1911},"end":{"line":68,"column":12,"offset":1972},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Well, caching was faster, let’s actually figure out a quantitative value for how many calculations we let the computer skip!","position":{"start":{"line":70,"column":1,"offset":1974},"end":{"line":70,"column":125,"offset":2098},"indent":[]}},{"type":"html","value":"<br/>","position":{"start":{"line":70,"column":125,"offset":2098},"end":{"line":70,"column":130,"offset":2103},"indent":[]}},{"type":"text","value":"\nIf we add ","position":{"start":{"line":70,"column":130,"offset":2103},"end":{"line":71,"column":11,"offset":2114},"indent":[1]}},{"type":"html","value":"<code class=\"language-text\">var skippedLength = 0</code>","position":{"start":{"line":71,"column":11,"offset":2114},"end":{"line":71,"column":34,"offset":2137},"indent":[]}},{"type":"text","value":" as a global var and update the following line:","position":{"start":{"line":71,"column":34,"offset":2137},"end":{"line":71,"column":81,"offset":2184},"indent":[]}}],"position":{"start":{"line":70,"column":1,"offset":1974},"end":{"line":71,"column":81,"offset":2184},"indent":[1]}},{"type":"html","lang":"javascript","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>collatzLength<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  skippedLength <span class=\"token operator\">+=</span> collatzLength<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> collatzLength<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":73,"column":1,"offset":2186},"end":{"line":78,"column":4,"offset":2293},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"We can see exactly how many chain iterations we skipped:","position":{"start":{"line":80,"column":1,"offset":2295},"end":{"line":80,"column":57,"offset":2351},"indent":[]}},{"type":"html","value":"<br/>","position":{"start":{"line":80,"column":57,"offset":2351},"end":{"line":80,"column":62,"offset":2356},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">67,631,017</code>","position":{"start":{"line":80,"column":62,"offset":2356},"end":{"line":80,"column":74,"offset":2368},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":80,"column":74,"offset":2368},"end":{"line":80,"column":75,"offset":2369},"indent":[]}},{"type":"html","value":"<br/>","position":{"start":{"line":80,"column":75,"offset":2369},"end":{"line":80,"column":80,"offset":2374},"indent":[]}},{"type":"text","value":"How many there were total:","position":{"start":{"line":80,"column":80,"offset":2374},"end":{"line":80,"column":106,"offset":2400},"indent":[]}},{"type":"html","value":"<br/>","position":{"start":{"line":80,"column":106,"offset":2400},"end":{"line":80,"column":111,"offset":2405},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">69,799,628</code>","position":{"start":{"line":80,"column":111,"offset":2405},"end":{"line":80,"column":123,"offset":2417},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":80,"column":123,"offset":2417},"end":{"line":80,"column":124,"offset":2418},"indent":[]}},{"type":"html","value":"<br/>","position":{"start":{"line":80,"column":124,"offset":2418},"end":{"line":80,"column":129,"offset":2423},"indent":[]}},{"type":"text","value":"Which means there was only ","position":{"start":{"line":80,"column":129,"offset":2423},"end":{"line":80,"column":156,"offset":2450},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">2,168,611</code>","position":{"start":{"line":80,"column":156,"offset":2450},"end":{"line":80,"column":167,"offset":2461},"indent":[]}},{"type":"text","value":" unique chain numbers and we skipped about 97% of recalculations!","position":{"start":{"line":80,"column":167,"offset":2461},"end":{"line":80,"column":232,"offset":2526},"indent":[]}},{"type":"html","value":"<br/>","position":{"start":{"line":80,"column":232,"offset":2526},"end":{"line":80,"column":237,"offset":2531},"indent":[]}},{"type":"text","value":"\nIf we skipped 97% of calculations, why does it still take 50%~ as long though, shouldn’t that number be closer to…3%?","position":{"start":{"line":80,"column":237,"offset":2531},"end":{"line":81,"column":120,"offset":2651},"indent":[1]}},{"type":"html","value":"<br/>","position":{"start":{"line":81,"column":120,"offset":2651},"end":{"line":81,"column":125,"offset":2656},"indent":[]}},{"type":"text","value":"\nIt looks like array manipulation takes up the remainder of our boost, our chain array has a length of ","position":{"start":{"line":81,"column":125,"offset":2656},"end":{"line":82,"column":103,"offset":2759},"indent":[1]}},{"type":"html","value":"<code class=\"language-text\">4,286,786,813</code>","position":{"start":{"line":82,"column":103,"offset":2759},"end":{"line":82,"column":118,"offset":2774},"indent":[]}},{"type":"text","value":", and manipulating arrays of that size definitely takes some effort.","position":{"start":{"line":82,"column":118,"offset":2774},"end":{"line":82,"column":186,"offset":2842},"indent":[]}}],"position":{"start":{"line":80,"column":1,"offset":2295},"end":{"line":82,"column":186,"offset":2842},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"My Naivete is showing, nothing else is jumping at me eager for efficiency.","position":{"start":{"line":84,"column":1,"offset":2844},"end":{"line":84,"column":75,"offset":2918},"indent":[]}}],"position":{"start":{"line":84,"column":1,"offset":2844},"end":{"line":84,"column":75,"offset":2918},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":85,"column":1,"offset":2919}}}}