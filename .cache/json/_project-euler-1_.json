{"data":{"site":{"siteMetadata":{"title":"Contemplating Imponderables"}},"markdownRemark":{"id":"61f20d34-3c8c-51bf-a467-705a45b41f1a","excerpt":"Hello probably me again. Still looking back in time. Today I am interested in explaining to myself why Project Euler is so fun! The short answer is: “Math”.\nThe…","html":"<p>Hello probably me again. Still looking back in time.</p>\n<p>Today I am interested in explaining to myself why <a href=\"https://projecteuler.net/\">Project Euler</a> is so fun!</p>\n<p>The short answer is: “Math”.<br>\nThe long answer is: “Different Math”.</p>\n<p>Let’s begin with problem 1:</p>\n<h3>Multiples of 3 and 5</h3>\n<blockquote>\n<p>If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.\nFind the sum of all the multiples of 3 or 5 below 1000.</p>\n</blockquote>\n<p>There are two immediately obvious approaches.</p>\n<ol>\n<li>\n<p>Iterate from 1-1000 (exclusive), modulus, and sum</p>\n<ul>\n<li>Iterates once through all the items</li>\n<li>Checks modulus of 3 &#x26;&#x26; 5 on each element</li>\n<li>Sums as we proceed</li>\n</ul>\n</li>\n<li>Create an array, iterate by increments of 3/5 (marking the increments), then summing the marked elements.</li>\n<li>Iterates once by 3’s, once by 5’s, then once by 1’s</li>\n<li>Sum on last iteration</li>\n<li>Requires an additional array.</li>\n</ol>\n<p><a href=\"https://hodrobond.github.io/project-euler/docs/0001_0010/0001.html\">Here</a> is a link to the two functions running with a slight delay so the execution is observable.</p>\n<p>From inspection, it looks like #1 will run faster, let’s see if I’m right using <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Performance/now\">performance.now()</a>.</p>\n<p>Running attempt #1 1000 times and taking the average resulted in: 0.004790000021457672 ms</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">%</span> <span class=\"token number\">5</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> i <span class=\"token operator\">%</span> <span class=\"token number\">3</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  sum <span class=\"token operator\">+=</span> i<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">return</span> sum</code></pre></div>\n<p>Running attempt #2 1000 times and taking the average resulted in: 0.04011499987542629 ms</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">1000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">+=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">1000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">+=</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">1000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n    sum <span class=\"token operator\">+=</span> i<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>So it looks like our first attempt was quicker by a factor of about <em>10x</em>.</p>\n<p>Alright. This was probably a bad example where immediate intuition resulted in an appropriate solution. I promise the other ones are more fun…</p>","frontmatter":{"title":"Let's Solve Project Euler Problem 1","date":"June 13, 2017","description":"Euler Problem 1"}}},"pageContext":{"slug":"/project-euler-1/","previous":null,"next":{"fields":{"slug":"/project-euler-2/"},"frontmatter":{"title":"Let's Solve Project Euler Problem 2"}}}}