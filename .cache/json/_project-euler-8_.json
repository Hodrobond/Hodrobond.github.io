{"data":{"site":{"siteMetadata":{"title":"Contemplating Imponderables"}},"markdownRemark":{"id":"75b31ea3-3578-5d24-951f-983c88033cae","excerpt":"Largest product in a series The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.\nFind the thirteen…","html":"<h3>Largest product in a series</h3>\n<blockquote>\n<p>The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.<br/>\nFind the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?</p>\n</blockquote>\n<style>\n  .number-block{\n    text-align: center;\n  }\n\n  .current{\n    background: yellow;\n  }\n\n  .highest{\n    background: green;\n  }\n</style>\n<div class=\"number-block\">\n73167176531330624919225119674426574742355349194934\n96983520312774506326239578318016984801869478851843\n85861560789112949495459501737958331952853208805511\n12540698747158523863050715693290963295227443043557\n66896648950445244523161731856403098711121722383113\n62229893423380308135336276614282806444486645238749\n30358907296290491560440772390713810515859307960866\n70172427121883998797908792274921901699720888093776\n65727333001053367881220235421809751254540594752243\n52584907711670556013604839586446706324415722155397\n53697817977846174064955149290862569321978468622482\n83972241375657056057490261407972968652414535100474\n82166370484403199890008895243450658541227588666881\n16427171479924442928230863465674813919123162824586\n17866458359124566529476545682848912883142607690042\n24219022671055626321111109370544217506941658960408\n07198403850962455444362981230987879927244284909188\n84580156166097919133875499200524063689912560717606\n05886116467109405077541002256983155200055935729725\n71636269561882670428252483600823257530420752963450\n</div>\n<p>So we want the largest product of 13 adjacent digits. This seems pretty simple, since they’re adjacent we only need to iterate the string once.\nI was considering maintaining an ongoing product (if we have a large input and want to retrieve a large number of subsequent digits recalculating the product each iteration may be unnecessary), but 0 throws a monkey wrench in that plan. We’ll see if Euler forces us to revisit that.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">getSolution</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">input</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> n <span class=\"token operator\">=</span> <span class=\"token number\">13</span><span class=\"token punctuation\">;</span>\n  input <span class=\"token operator\">=</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> currentLargest <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> stack <span class=\"token operator\">=</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> product <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">acc<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> arr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> acc <span class=\"token operator\">*=</span> val<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span>n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>input<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>product <span class=\"token operator\">></span> currentLargest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      currentLargest <span class=\"token operator\">=</span> product<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    product <span class=\"token operator\">=</span> product <span class=\"token operator\">/</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    product <span class=\"token operator\">*=</span> input<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> currentLargest<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div id=\"example-anchor\" class=\"number-block\"></div>\n<div id=\"current-anchor\"></div>\n<div id=\"answer-anchor\"></div>\n<button id=\"run-example\">Show me the demo!</button>\n<script>\nvar input = \"7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450\";\n\nvar rowLength = 50;\nvar target = document.getElementById(\"example-anchor\");\nvar row;\nfor(var i=0; i<input.length; i++){\n  if( i % rowLength === 0){\n    row = document.createElement(\"div\");\n    row.setAttribute('class', 'row');\n    target.append(row);\n  }\n  var num = document.createElement(\"span\");\n  num.id = \"index-\"+i;\n  num.textContent = input[i];\n  row.append(num);\n}\n\nfunction runDemo(){\n  var input = \"7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450\";\n  for(var i=0; i<input.length; i++){\n    var elem = document.getElementById(\"index-\"+i);\n    elem.classList.remove(\"current\");\n    elem.classList.remove(\"highest\");\n  }\n  var timer = 0;\n  var n = 13;\n  input = input.split(\"\");\n  var currentLargest = 0;\n  var stack = input.slice(0,n);\n  for(var i=0; i<n; i++){\n    document.getElementById(\"index-\"+i).classList.add(\"current\");\n  }\n  for(var i=n; i<input.length; i++){\n    (function(i, timer){\n      setTimeout(function(){\n          var product = stack.reduce(function(acc, val, index, arr){\n            return acc *= val;\n          })\n          document.getElementById(\"current-anchor\").innerHTML = \"current:\"+product;\n          if(product > currentLargest){\n            var highestClasses = document.getElementsByClassName(\"highest\");\n            while(highestClasses.length > 0){\n              highestClasses.item(0).classList.remove(\"highest\");\n            }\n            for(var j=(i-n); j<i; j++){\n              document.getElementById(\"index-\"+j).classList.add(\"highest\");\n            }\n            document.getElementById(\"answer-anchor\").innerHTML = \"current highest:\"+product;\n            currentLargest = product;\n          }\n          stack.shift();\n          document.getElementById(\"index-\"+(i-n)).classList.remove(\"current\");\n          stack.push(input[i]);      \n          document.getElementById(\"index-\"+i).classList.add(\"current\");\n        }, timer)\n    })(i, timer);\n    timer += 50;\n  }\n  setTimeout(function(){\n    var highestClasses = document.getElementsByClassName(\"current\");\n    while(highestClasses.length > 0){\n      highestClasses.item(0).classList.remove(\"current\");\n    }    \n  }, timer+50)\n\n  //return currentLargest;\n\n}\n\ndocument.getElementById(\"run-example\").onclick = runDemo;\n\n</script>","frontmatter":{"title":"Let's Solve Project Euler Problem 8","date":"June 19, 2017","description":"Euler Problem 8"}}},"pageContext":{"slug":"/project-euler-8/","previous":{"fields":{"slug":"/project-euler-7/"},"frontmatter":{"title":"Let's Solve Project Euler Problem 7"}},"next":{"fields":{"slug":"/project-euler-9/"},"frontmatter":{"title":"Let's Solve Project Euler Problem 9"}}}}