{"componentChunkName":"component---src-templates-blog-post-js","path":"/08_17_CI/","result":{"data":{"site":{"siteMetadata":{"title":"Contemplating Imponderables"}},"markdownRemark":{"id":"866d782e-77a3-5673-b725-90b8851bc9fa","excerpt":"Continuous integration I had a fun discussion related to Continuous Integration. I wanted to write some notes down in case that discussion happens again. There…","html":"<h3>Continuous integration</h3>\n<p>I had a fun discussion related to Continuous Integration. I wanted to write some notes down in case that discussion happens again.</p>\n<p>There’s a million sets of notes out there, but here’s my journey into setting up Jenkins locally.</p>\n<h3>Deciding on a CI service</h3>\n<p>Considering this is a side-project, low/no cost.</p>\n<p>Minimal Feature requirements:</p>\n<ul>\n<li>Ability to receive Github webhooks related to <code class=\"language-text\">pull requests</code> and <code class=\"language-text\">merging</code></li>\n<li>Ability to pull code from repo and perform script actions (<code class=\"language-text\">npm i</code>, <code class=\"language-text\">npm run build</code>, deploy to server)</li>\n<li>Ability to report success and failure of actions (tests)</li>\n</ul>\n<p><a href=\"https://circleci.com/\">CircleCI</a> is a good frontrunner, has free credits but is ultimately a paid service for larger scales</p>\n<p><a href=\"https://travis-ci.com/\">Travis CI</a> is another option, but is also paid</p>\n<p><a href=\"https://www.jenkins.io/\">Jenkins</a> is free + open source</p>\n<p>There’s probably more, chose Jenkins.</p>\n<h3>Preparation to configure Jenkins</h3>\n<p><a href=\"https://github.com/Hodrobond/BlogComponents\">Had a repository that exists</a>, which I’ll be using for testing.</p>\n<p>Used <a href=\"https://brew.sh/\">brew</a> to install Jenkins</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">brew install jenkins-lts\njenkins-lts</code></pre></div>\n<p>Added the <code class=\"language-text\">GitHub Pull Request Builder</code> (<code class=\"language-text\">v1.42.1</code>) package</p>\n<p>Used <a href=\"https://ngrok.com/\">ngrok</a> or some other port-tunnelling service to expose the Jenkins port to the world</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">ngrok http 8080</code></pre></div>\n<p>Update repository settings to send webhook events to Jenkins\n<code class=\"language-text\">repository</code> —> <code class=\"language-text\">settings</code> —> <code class=\"language-text\">webhooks</code></p>\n<p>I’ve added two:</p>\n<ol>\n<li><code class=\"language-text\">https://&lt;ngrok_address&gt;/github-webhook/</code></li>\n<li>Handles most webhook events (merge, push, etc)</li>\n<li>Listens to <code class=\"language-text\">just the push event</code> (merges count)</li>\n<li><code class=\"language-text\">https://&lt;ngrok_address&gt;/ghprbhook/</code></li>\n<li>Handles triggers based on pull request submission</li>\n<li>Only listens to <code class=\"language-text\">Pull Request</code> events</li>\n</ol>\n<p>If Github verifies the initial ping, you should have green checkmarks - and you should be set from Github’s side.</p>\n<h3>Jenkins Project Settings (Test on Pull Request)</h3>\n<p>Freestyle project, I went with <code class=\"language-text\">node</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">General</code></pre></div>\n<ul>\n<li>Project URL should NOT include <code class=\"language-text\">.git</code>, ex: <code class=\"language-text\">https://github.com/Hodrobond/BlogComponents</code></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Source Code Management</code></pre></div>\n<ul>\n<li>I’ve got Github, repository URL does include <code class=\"language-text\">.git</code>: <code class=\"language-text\">https://github.com/Hodrobond/BlogComponents.git</code></li>\n<li>Credentials should ideally be a separate <code class=\"language-text\">jenkins</code> user for handling access. Local POC, used my own.</li>\n<li><code class=\"language-text\">Branches to build</code> is empty (or <code class=\"language-text\">**</code>, listen to all branches for PRs)</li>\n<li>name: <code class=\"language-text\">origin</code></li>\n<li>\n<p>refspec: <code class=\"language-text\">+refs/pull/*:refs/remotes/origin/pr/*</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Build Triggers</code></pre></div>\n</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> GitHub Pull Request Builder</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> Use github hooks for build triggering</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> GitHub hook trigger for GITScm polling</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Build Command</code></pre></div>\n<p>Mine is just ensuring the test cases pass:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm i\nlerna bootstrap --hoist\nnpm run build\nnpm test</code></pre></div>\n<p>Then when a Pull Request is initiated, it should kick off the Jenkins job, and <a href=\"https://github.com/Hodrobond/BlogComponents/pull/6\">report back to Github</a></p>\n<h3>Jenkins Project Settings (Deploy on Merge)</h3>\n<p>Differences from above:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Source Code Management</code></pre></div>\n<ul>\n<li>Branch specifier <code class=\"language-text\">*/master</code>, should probably just be <code class=\"language-text\">master</code> so forks can’t trigger anything</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Build Triggers</code></pre></div>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> GitHub Pull Request Builder</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> GitHub hook trigger for GITScm polling</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Build</code></pre></div>\n<p>Let’s just act like publishing Storybook is a <code class=\"language-text\">deploy</code> while I figure out best practices for Lerna in CI</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm i\nlerna bootstrap --hoist\nnpm run build\nnpm run check-types\nnpm run build-storybook\nnpm run deploy-storybook</code></pre></div>\n<h3>Results</h3>\n<ul>\n<li>PR Triggered tests which were reported back (can configure additional settings in Git to block merge unless all checks pass). <a href=\"https://github.com/Hodrobond/BlogComponents/pull/6\">Here’s</a> an example that’s unmerged.</li>\n<li>Deploy on merge</li>\n<li>Updated <a href=\"https://hodrobond.github.io/BlogComponents/\">storybook</a>!</li>\n</ul>","frontmatter":{"title":"Continuous Integration (P1)","date":"August 17, 2020","description":"Setting Jenkins up locally to listen to Pull Requests"}}},"pageContext":{"slug":"/08_17_CI/","previous":{"fields":{"slug":"/08_03_redesign/"},"frontmatter":{"title":"Redesign"}},"next":null}},"staticQueryHashes":["1246554614","2841359383"]}